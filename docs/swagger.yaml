basePath: /api/v1
definitions:
  models.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  models.MessageResponse:
    properties:
      message:
        example: Operation successful
        type: string
    type: object
  models.Pagination:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
      total_pages:
        example: 10
        type: integer
    type: object
  models.UserCreateRequest:
    properties:
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        maxLength: 100
        minLength: 2
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.UserFilter:
    properties:
      email:
        type: string
      name:
        type: string
      sort_by:
        example: name,email,created_at
        type: string
      sort_order:
        example: asc,desc
        type: string
    type: object
  models.UserListRequest:
    properties:
      filter:
        $ref: '#/definitions/models.UserFilter'
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
    type: object
  models.UserResponse:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: john@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  models.UserUpdateRequest:
    properties:
      email:
        example: jane@example.com
        type: string
      name:
        example: Jane Doe
        maxLength: 100
        minLength: 2
        type: string
    type: object
  models.UsersListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.UserResponse'
        type: array
      pagination:
        $ref: '#/definitions/models.Pagination'
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A starter kit for building REST APIs with Golang, Gin, and GORM
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Golang Starter Kit API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses: {}
      summary: User Login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user (client-side token removal)
      produces:
      - application/json
      responses: {}
      summary: User Logout
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequest'
      produces:
      - application/json
      responses: {}
      summary: User Registration
      tags:
      - Authentication
  /profile:
    get:
      consumes:
      - application/json
      description: Get the authenticated user's profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
      security:
      - BearerAuth: []
      summary: Get User Profile
      tags:
      - Profile
    put:
      consumes:
      - application/json
      description: Update the authenticated user's profile
      parameters:
      - description: Profile update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
      security:
      - BearerAuth: []
      summary: Update User Profile
      tags:
      - Profile
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
      summary: Create User
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
      summary: Delete User
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Retrieve a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
      summary: Get User by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update an existing user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
      summary: Update User
      tags:
      - Users
  /users/pagination:
    post:
      consumes:
      - application/json
      description: Retrieve paginated list of users with optional filters
      parameters:
      - description: Pagination and filter parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UsersListResponse'
      summary: Get Users with Pagination
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
